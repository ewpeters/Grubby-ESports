= ActsAsSnook

ActsAsSnook is a simple and elegant method of handling comment spam that doesn't rely on CAPTCHAS or Javascript or external web services. It uses a point based system to detect common traits of comment spam. The details of this implementation can be found in the source code and tests as well as the original blog post I based this plugin on (see "Thanks and credits").

== Setup

ActsAsSnook assumes that you have the following fields on your comment model: <tt>author</tt> [string], <tt>email</tt> [string], <tt>url</tt> [string], <tt>body</tt> [text], and <tt>spam_status</tt> [string]. The name of these attributes can be changed as shown in the next section.

ActsAsSnook can also be configured to maintain a counter cache of ham comments [ham being the opposite of spam] for you. If your comment model has only one <tt>belongs_to</tt> association, this functionality will be automatically added. If not, you can add it in by manually configuring the following options:

* <tt>:comment_belongs_to</tt> - The name of the parent class that comments belong to.
* <tt>:ham_comments_count_field</tt> - The name of the attribute on the parent class which maintains the counter cache.

<strong>Note:</strong> Do not rely on an association setup like <tt>belongs_to :entry, :counter_cache => true</tt> for displaying comment count. The number returned there is the number of total comments, irrespective of spam status.

== Usage

  acts_as_snook

That's it if you want to use the default attributes I mentioned above. If you need to customize them, just specify them as arguments to acts_as_snook:

  acts_as_snook :author_field => :user, :body_field => :comment # Etc, etc

You may also add your own keywords to the list of spam keywords that ActsAsSnook uses to detect spam by adding them to the arguments:

  acts_as_snook :spam_words => %{hatespeech ignorantlanguage blathering}

ActsAsSnook also provides some helper methods for determining the spam status of a comment.

<tt>comment.ham?</tt>:: Returns true for comments not marked as spam. "Ham" comments are safe for displaying on your site as is. This is the method you should most likely be using to check an individual comment.
<tt>comment.spam?</tt>:: Returns true for comments marked as spam. These are should not be shown on your site.
<tt>comment.moderate?</tt>:: Returns true for comments that were not marked as actual spam but did not get enough points to be marked as "ham" either. The spam_status field for these will contain "moderate".
<tt>Comment#ham</tt>:: Shortcut for <tt>Comment#find(:all, :conditions => {:spam_status => "ham"})</tt>
<tt>Comment#spam</tt>:: Shortcut for <tt>Comment#find(:all, :conditions => {:spam_status => "spam"})</tt>
<tt>Comment#moderate</tt>:: Shortcut for <tt>Comment#find(:all, :conditions => {:spam_status => "moderate"})</tt>

If you have provided a <tt>ham_comments_count</tt> attribute on your comment's parent class (in this case, Entry) you also get <tt>Entry#ham_comments_count</tt>. See the documentation for the <tt>acts_as_snook</tt> method for more information on that.

== Credits and Thanks

Much love to Jonathan Snook, web developer extraordinaire. Most of the algorithms of ActsAsSnook [as well as the name, obviously] come from his blog post which you can find here[http://snook.ca/archives/other/effective_blog_comment_spam_blocker] The actual implementation I myself wrote.

Copyright (c) 2008 Lucky Sneaks, released under the MIT license
